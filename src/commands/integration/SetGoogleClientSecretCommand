const BarracksCommand = require('../BarracksCommand');
const Validator = require('../../utils/Validator');
const inStream = require('in-stream');
const fs = require('fs');

function getClientSecretFromString(data) {
  return new Promise((resolve, reject) => {
    if (Validator.isJsonObject(data)) {
      const secret = JSON.parse(data);
      if (secret.web.client_id) {
        resolve(secret);
      } else {
        reject('Missing mandatory attribute in client secret');
      }
    } else {
      reject('Client secret must be described by a valid JSON');
    }
  });
}

function readClientSecretFromFile(file) {
  return new Promise((resolve, reject) => {
    fs.readFile(file, (err, data) => {
      if (err) {
        reject(err);
      }
      getClientSecretFromString(data).then(secret => {
        resolve(secret);
      }).catch(err => {
        reject(err);
      });
    });
  });
}

function readClientSecretFromStdin() {
  return new Promise((resolve, reject) => {
    let streamContent = '';

    inStream.on('data', chunk => {
      streamContent += chunk.toString('utf8');
    });

    inStream.on('close', () => {
      getClientSecretFromString(streamContent).then(secret => {
        resolve(secret);
      }).catch(err => {
        reject(err);
      });
    });

    inStream.on('error', error => {
      reject(error);
    });
  });
}

function getClientSecret(program) {
  if (program.file) {
    return readClientSecretFromFile(program.file);
  } else {
    return readClientSecretFromStdin();
  }
}

class SetGoogleClientSecretCommand extends BarracksCommand {

  configureCommand(program) {
    return program.option('--file [path/to/file]', 'The path to the file containing the JSON describing the client secret.')
  }

  validateCommand(program) {
    return !!(!program.file || Validator.fileExists(program.file));
  }

  execute(program) {
    let token;
    return this.getAuthenticationToken().then(authToken => {
      token = authToken;
      return getClientSecret(program);
    }).then(secret => {
      return this.barracks.setGoogleClientSecret(token, secret);
    });
  }
}

module.exports = SetGoogleClientSecretCommand;